if(void 0===__webpack_require__)var __webpack_require__={};(self.webpackChunkreact_py_docs=self.webpackChunkreact_py_docs||[]).push([[399],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef(function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),y=d(t),s=r,m=y["".concat(p,".").concat(s)]||y[s]||u[s]||i;return t?a.createElement(m,l(l({ref:n},g),{},{components:t})):a.createElement(m,l({ref:n},g))});function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=s;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[y]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},6851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(8168),r=(t(6540),t(5680));const i={sidebar_position:6},l="API Reference",o={unversionedId:"introduction/api-reference",id:"introduction/api-reference",title:"API Reference",description:"``",source:"@site/docs/introduction/api-reference.md",sourceDirName:"introduction",slug:"/introduction/api-reference",permalink:"/react-py/docs/introduction/api-reference",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Usage with Docusaurus",permalink:"/react-py/docs/introduction/docusaurus-usage"},next:{title:"Troubleshooting",permalink:"/react-py/docs/introduction/troubleshooting"}},p={},d=[{value:"<code>&lt;PythonProvider&gt;</code>",id:"pythonprovider",level:2},{value:"<code>usePython</code> and <code>usePythonConsole</code> hooks",id:"usepython-and-usepythonconsole-hooks",level:2},{value:"runPython",id:"runpython",level:3},{value:"stdout",id:"stdout",level:3},{value:"stderr",id:"stderr",level:3},{value:"isLoading",id:"isloading",level:3},{value:"isReady",id:"isready",level:3},{value:"isRunning",id:"isrunning",level:3},{value:"interruptExecution",id:"interruptexecution",level:3},{value:"readFile",id:"readfile",level:3},{value:"writeFile",id:"writefile",level:3},{value:"mkdir",id:"mkdir",level:3},{value:"rmdir",id:"rmdir",level:3},{value:"watchModules",id:"watchmodules",level:3},{value:"unwatchModules",id:"unwatchmodules",level:3},{value:"isAwaitingInput",id:"isawaitinginput",level:3},{value:"sendInput",id:"sendinput",level:3},{value:"prompt",id:"prompt",level:3},{value:"<code>usePythonConsole</code> hook",id:"usepythonconsole-hook",level:2},{value:"banner",id:"banner",level:3},{value:"consoleState",id:"consolestate",level:3},{value:"Types",id:"types",level:2},{value:"Packages",id:"packages",level:3},{value:"official",id:"official",level:4},{value:"micropip",id:"micropip",level:4},{value:"ConsoleState",id:"consolestate-1",level:3}],g={toc:d},y="wrapper";function u({components:e,...n}){return(0,r.yg)(y,(0,a.A)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"api-reference"},"API Reference"),(0,r.yg)("h2",{id:"pythonprovider"},(0,r.yg)("inlineCode",{parentName:"h2"},"<PythonProvider>")),(0,r.yg)("p",null,"Props which can be provided to the ",(0,r.yg)("inlineCode",{parentName:"p"},"PythonProvider")," component."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Prop"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"packages"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#packages"},(0,r.yg)("inlineCode",{parentName:"a"},"Packages"))),(0,r.yg)("td",{parentName:"tr",align:null},"undefined"),(0,r.yg)("td",{parentName:"tr",align:null},"Packages to be loaded globally for usage by all instances.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"timeout"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Time in ms until a running instance is terminated, 0 means there is no time limit.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"lazy"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, prevents the web worker from spawning until ",(0,r.yg)("inlineCode",{parentName:"td"},"runPython")," is called for the first time.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"terminateOnCompletion"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, the web worker will terminate on completion. Does not apply to the ",(0,r.yg)("inlineCode",{parentName:"td"},"usePythonConsole")," hook.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"autoImportPackages"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, automatically imports packages in a code chunk. Uses Pyodide ",(0,r.yg)("inlineCode",{parentName:"td"},"loadPackagesFromImports"),".")))),(0,r.yg)("h2",{id:"usepython-and-usepythonconsole-hooks"},(0,r.yg)("inlineCode",{parentName:"h2"},"usePython")," and ",(0,r.yg)("inlineCode",{parentName:"h2"},"usePythonConsole")," hooks"),(0,r.yg)("p",null,"Props which can be provided to the ",(0,r.yg)("inlineCode",{parentName:"p"},"usePython")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"usePythonConsole")," hooks."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Prop"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"packages"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#packages"},(0,r.yg)("inlineCode",{parentName:"a"},"Packages"))),(0,r.yg)("td",{parentName:"tr",align:null},"undefined"),(0,r.yg)("td",{parentName:"tr",align:null},"Packages to be loaded for usage by this instance.")))),(0,r.yg)("h3",{id:"runpython"},"runPython"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"async (code: string) => void")),(0,r.yg)("p",null,"Takes a string of Python code. Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'runPython(`pi = 3.141\nprint(f"Pi to two decimal places is: {pi:.2f}")`)\n// expected output: "Pi to two decimal places is: 3.14"\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," calls to ",(0,r.yg)("inlineCode",{parentName:"p"},"runPython")," when using the ",(0,r.yg)("inlineCode",{parentName:"p"},"usePythonConsole")," hook can be incomplete."),(0,r.yg)("h3",{id:"stdout"},"stdout"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,"Python stdout. When using the ",(0,r.yg)("inlineCode",{parentName:"p"},"usePythonConsole")," hook, you will need to keep track of the history of stdout yourself."),(0,r.yg)("h3",{id:"stderr"},"stderr"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,"Python stderr."),(0,r.yg)("h3",{id:"isloading"},"isLoading"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"True if the worker is still being initialised. False if loaded."),(0,r.yg)("h3",{id:"isready"},"isReady"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"True if instance is ready to run Python code. False otherwise. When using ",(0,r.yg)("inlineCode",{parentName:"p"},"lazy")," prop, this will be false until ",(0,r.yg)("inlineCode",{parentName:"p"},"runPython")," is called for the first time."),(0,r.yg)("h3",{id:"isrunning"},"isRunning"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"True if code is being executed. False if idle."),(0,r.yg)("h3",{id:"interruptexecution"},"interruptExecution"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"() => void")),(0,r.yg)("p",null,"Can be called to immediately interrupt ongoing execution. Will terminate the running worker and spawn a new one."),(0,r.yg)("h3",{id:"readfile"},"readFile"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(name: string) => void")),(0,r.yg)("p",null,"Exposes ",(0,r.yg)("inlineCode",{parentName:"p"},"pyodide.FS.readFile"),", encoding is ",(0,r.yg)("inlineCode",{parentName:"p"},"utf8"),". ",(0,r.yg)("a",{parentName:"p",href:"https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.readFile"},"Read more here"),"."),(0,r.yg)("h3",{id:"writefile"},"writeFile"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(name: string, data: string | ArrayBufferView) => void")),(0,r.yg)("p",null,"Exposes ",(0,r.yg)("inlineCode",{parentName:"p"},"pyodide.FS.writeFile"),", encoding is ",(0,r.yg)("inlineCode",{parentName:"p"},"utf8"),". ",(0,r.yg)("a",{parentName:"p",href:"https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.writeFile"},"Read more here"),"."),(0,r.yg)("h3",{id:"mkdir"},"mkdir"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(name: string) => void")),(0,r.yg)("p",null,"Exposes ",(0,r.yg)("inlineCode",{parentName:"p"},"pyodide.FS.mkdir"),". ",(0,r.yg)("a",{parentName:"p",href:"https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.mkdir"},"Read more here"),"."),(0,r.yg)("h3",{id:"rmdir"},"rmdir"),(0,r.yg)("p",null,"Exposes ",(0,r.yg)("inlineCode",{parentName:"p"},"pyodide.FS.rmdir"),". ",(0,r.yg)("a",{parentName:"p",href:"https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.rmdir"},"Read more here"),"."),(0,r.yg)("h3",{id:"watchmodules"},"watchModules"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(moduleNames: string[]) => void")),(0,r.yg)("p",null,"Adds modules to be reloaded before code is run."),(0,r.yg)("h3",{id:"unwatchmodules"},"unwatchModules"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(moduleNames: string[]) => void")),(0,r.yg)("p",null,"Removes modules to be reloaded before code is run."),(0,r.yg)("h3",{id:"isawaitinginput"},"isAwaitingInput"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"True if Python is awaiting input from ",(0,r.yg)("inlineCode",{parentName:"p"},"stdin"),". False otherwise."),(0,r.yg)("h3",{id:"sendinput"},"sendInput"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"(value: string) => void")),(0,r.yg)("p",null,"Sends input to Python ",(0,r.yg)("inlineCode",{parentName:"p"},"stdin"),"."),(0,r.yg)("h3",{id:"prompt"},"prompt"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,"Provides the current ",(0,r.yg)("inlineCode",{parentName:"p"},"stdin")," prompt string."),(0,r.yg)("h2",{id:"usepythonconsole-hook"},(0,r.yg)("inlineCode",{parentName:"h2"},"usePythonConsole")," hook"),(0,r.yg)("h3",{id:"banner"},"banner"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,"Python banner."),(0,r.yg)("h3",{id:"consolestate"},"consoleState"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"ConsoleState | undefined")),(0,r.yg)("p",null,"Current state of console."),(0,r.yg)("h2",{id:"types"},"Types"),(0,r.yg)("h3",{id:"packages"},"Packages"),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"{\n  official: ['asciitree'],\n  micropip: ['python-cowsay'],\n}\n")),(0,r.yg)("h4",{id:"official"},"official"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string[]")," (optional) - Pyodide official packages"),(0,r.yg)("h4",{id:"micropip"},"micropip"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string[]")," (optional) - Packages imported using micropip"),(0,r.yg)("h3",{id:"consolestate-1"},"ConsoleState"),(0,r.yg)("p",null,"Enum representing console state."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"'complete' | 'incomplete' | 'syntax-error'")))}u.isMDXComponent=!0}}]);